// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/indigonote/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"net/http"
	"strings"
)

// Error defines model for Error.
type Error struct {

	// Error code
	Code int32 `json:"code"`

	// Error message
	Message string `json:"message"`
}

// NewPet defines model for NewPet.
type NewPet struct {

	// Name of the pet
	Name *string `json:"name" validate:"omitempty,alphanum,max=1048576"`
	Size int     `json:"size" validate:"min=0,max=20"`

	// Type of the pet
	Tag *string `json:"tag,omitempty" validate:"omitempty,regex=^[A-Za-z]+,min=2,max=32"`
}

// Pet defines model for Pet.
type Pet struct {
	// Embedded struct due to allOf(#/components/schemas/NewPet)
	NewPet
	// Embedded fields due to inline allOf schema

	// Unique id of the pet
	Id int64 `json:"id" validate:"min=1,max=100"`
}

// FindPetsParams defines parameters for FindPets.
type FindPetsParams struct {

	// tags to filter by
	Tags *[]string `json:"tags,omitempty"`

	// maximum number of results to return
	Limit *int32 `json:"limit,omitempty"`
}

// AddPetJSONBody defines parameters for AddPet.
type AddPetJSONBody NewPet

// AddPetRequestBody defines body for AddPet for application/json ContentType.
type AddPetJSONRequestBody AddPetJSONBody

type ServerInterface interface {
	// Returns all pets (GET /pets)
	FindPets(w http.ResponseWriter, r *http.Request)
	// Creates a new pet (POST /pets)
	AddPet(w http.ResponseWriter, r *http.Request)
	// Deletes a pet by ID (DELETE /pets/{id})
	DeletePet(w http.ResponseWriter, r *http.Request)
	// Returns a pet by ID (GET /pets/{id})
	FindPetById(w http.ResponseWriter, r *http.Request)
}

// ParamsForFindPets operation parameters from context
func ParamsForFindPets(ctx context.Context) *FindPetsParams {
	return ctx.Value("FindPetsParams").(*FindPetsParams)
}

// FindPets operation middleware
func FindPetsCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// Parameter object where we will unmarshal all parameters from the context
		var params FindPetsParams

		// ------------- Optional query parameter "tags" -------------
		if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "limit" -------------
		if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "FindPetsParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// AddPet operation middleware
func AddPetCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// DeletePet operation middleware
func DeletePetCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int64

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// FindPetById operation middleware
func FindPetByIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int64

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(FindPetsCtx)
		r.Get("/pets", si.FindPets)
	})
	r.Group(func(r chi.Router) {
		r.Use(AddPetCtx)
		r.Post("/pets", si.AddPet)
	})
	r.Group(func(r chi.Router) {
		r.Use(DeletePetCtx)
		r.Delete("/pets/{id}", si.DeletePet)
	})
	r.Group(func(r chi.Router) {
		r.Use(FindPetByIdCtx)
		r.Get("/pets/{id}", si.FindPetById)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RX224byRH9lUInbxkNadnZBAQCRGt5AQK7thLv5iG2AhR7imQZfRl3V1PiGvz3oHqG",
	"N0m2s0gQJNgXksPpy6lTp6pPfzI2+j4GCpLN7JPJdk0e689XKcWkP/oUe0rCVP+2sSP97ijbxL1wDGY2",
	"DIb6rjHLmDyKmRkO8vzSNEa2PQ2PtKJkdo3xlDOuPrvQ/vVhapbEYWV2u8Yk+lg4UWdm78y44X747a4x",
	"r+nuhuQx7oD+ie1eoyeIS5A1QU9iGhOKc7hwZGaSCj0E0Jj7i1W8sCVL9BeCK0WBrl9jKF6R4P2fnk1f",
	"/PH3f/imosn8c93V4z374s3sctoYz2F4mD5FTV30Ic4ft/0DnB7vv6ewkrWZPb+sa+4fLxvTowglnfiP",
	"d1cXf8eLn29/91UyK9bbw6i4+EBWFNHIJzr3Zmlm7z6Z3yZampn5zeQonsmonMnI/655mADuHof1U+CP",
	"hYC789hOBfTNiyHYgbFn01P+nj3m70FM3D0R0e1Oh3FYxkHQQdDWCMkjOzMz2LMQ+j/nO1ytKLUcVRhV",
	"QObt8B9c3czhR0JNekk6aS3SzyaTkzm75kG4V5DR947qZFmjQMmUATXsLDERYAYMQPfDMInQkY8hS0Ih",
	"WBJKSZSBQyXrTU9BV3reTiH3ZHnJFutWjXFsKWQ6Kt9c9WjXBJft9Axynk0md3d3LdbXbUyryTg3T76f",
	"v3z1+u2ri8t22q7FuypPSj6/Wb6ltGFLT8U9qUMmqjcWd8rZzRimacyGUh5IedZO26muHHsK2LOZmef1",
	"ryrjddXORAnSH6tBiue0/pWkpJABnatMwjJFXxnK2yzkB6r1uWRKsFaSraWcQeL78Bo9ZOrAxtCxpyDF",
	"A2Vp4QckSwEzCPk+Jsi4YhHOkLFnCg0EspDWMdiSIZM/GcAC6ElauKJAGAAFVgk33CFgWRVqAC0w2uK4",
	"Tm3hZUm4YCkJYscRXEzkG4gpYCKgFQmQoxFdINuALSmXrKXjyErJLVwXzuAZpKSecwN9cRsOmHQvSlGD",
	"bkA4WO5KENhg4pLhg7ayFuYB1mhhrSAwZ4LeoRBCx1aKVzrmQ4lpLNhxz9lyWAEG0WiOsTteFYeHyPs1",
	"JpKEexJ1PPjoKAsTsO8pdaxM/Y036IeA0PHHgh46RmUmYYaPGtuGHAuEGEBikpiUEl5S6A67t3CTkDIF",
	"UZgU2B8BlBQQNtEV6VFgQ4ECKuCBXP3wWJKuMQ/HlZeURtaXaNlxPtuk7qAfzTG/FnLs0JEmtmuUR0sJ",
	"RQPT7xbeltxT6FhZdqji6aKLqVEFZrKiaq5RVqlo1A1saM22OARtdKkrHhwvKMUWfohpwUCFs4/daRr0",
	"dRW2Q8uBsX0f3oe31NVMlAxLUvG5uIipTqB4VEwqkopvQWvDY11wJJ+za4DKWbUMKQdXVIeqzhZu1pjJ",
	"uaEwekrj9EpzTS8JLLFYXpSBcNzvo+NO52/IjanjDaWEzfnWWifAXXMoxMCLdQs/CfTkHAWhrCdMH3Mh",
	"raR9EbWgVOC+CrTo9lzuV9qHVZlsKpCDLEIJFiRxlnqAbViQWviuZEtAUrtBV/hQBdopsiVHiSucQb/7",
	"CV7VUrCKxxafMYDHlYZMbsxWC38pw1QfneZtyB6VQTtHKM2h+QAWq0UyjBzlOYQ9imNsModqVLFogoFD",
	"c4QyFm7gzHvAWTFYltKxQs0ZocheZ2Mih53OSKv7tXBzmpjK3IixTyRc/EnnGkRTmhN9a+tt3+sRp+ai",
	"HnfzzszMdxw6PV/qsZGUAEq5upXzw0JwpX0fluyEEiy2Rq2AmZmPhdL2eM7rONOMhrj6FyFfz6AHLupg",
	"LzAl3Opzlm099tTGVCN0jmA0MxCKX1BS55MoFycVVqpn2WcwOfYsZ6C+arV3t2qIcq+tpaK/nE73rofC",
	"4Ov63o3GYfIhK8RPT4X9JdM3OL4HROwe+Z+eBPZgBne0xOLkF+H5EozhyvLExiXQfa+tVXvwMKYxuXiP",
	"afuEgVBsfcxPWI2XiVCqZQt0p2P3Xqz6Gj2DB+w6RO2cc/GOukdivepUq2bwqpTl29ht/2Ms7B34Yxpu",
	"SFRj2HX6dYBtTj2z3np2/6ZmviqV/x9pPEp4fV/96OQTd7tBIo7kicvl8L/OzRxWrt5uYIHaZuOgmvk1",
	"5KIxPaGR6zp7kMkXO9r8WntIP+R2xDL2DzXQx/bB3aNMf66X1FvXv9BLXjyOWoEMKLr/pUReH5JRs7CF",
	"+bXC+/KF4jxjhzzOrz93/Hy7nXe/KF9LErv+r6XrV1vGDzI6ZL8OobTZp+nsHr+/krcnF1u9ne5ud/8M",
	"AAD///YSrNU1EwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
