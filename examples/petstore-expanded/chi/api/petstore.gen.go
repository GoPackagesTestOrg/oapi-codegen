// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by sios.tech/indigo/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"net/http"
	"sios.tech/indigo/oapi-codegen/pkg/runtime"
	"strings"
)

// Error defines model for Error.
type Error struct {

	// Error code
	Code int32 `json:"code" validate:"required"`

	// Error message
	Message string `json:"message" validate:"required"`
}

// NewPet defines model for NewPet.
type NewPet struct {

	// Name of the pet
	Name string `json:"name" validate:"required"`
	Size int    `json:"size" validate:"min=0,max=20,required"`

	// Type of the pet
	Tag *string `json:"tag,omitempty" validate:"min=2,max=32,regex=^[A-Za-z]+"`
}

// Pet defines model for Pet.
type Pet struct {
	// Embedded struct due to allOf(#/components/schemas/NewPet)
	NewPet
	// Embedded fields due to inline allOf schema

	// Unique id of the pet
	Id int64 `json:"id" validate:"required,min=1,max=100"`
}

// FindPetsParams defines parameters for FindPets.
type FindPetsParams struct {

	// tags to filter by
	Tags *[]string `json:"tags,omitempty"`

	// maximum number of results to return
	Limit *int32 `json:"limit,omitempty"`
}

// AddPetJSONBody defines parameters for AddPet.
type AddPetJSONBody NewPet

// AddPetRequestBody defines body for AddPet for application/json ContentType.
type AddPetJSONRequestBody AddPetJSONBody

type ServerInterface interface {
	// Returns all pets (GET /pets)
	FindPets(w http.ResponseWriter, r *http.Request)
	// Creates a new pet (POST /pets)
	AddPet(w http.ResponseWriter, r *http.Request)
	// Deletes a pet by ID (DELETE /pets/{id})
	DeletePet(w http.ResponseWriter, r *http.Request)
	// Returns a pet by ID (GET /pets/{id})
	FindPetById(w http.ResponseWriter, r *http.Request)
}

// ParamsForFindPets operation parameters from context
func ParamsForFindPets(ctx context.Context) *FindPetsParams {
	return ctx.Value("FindPetsParams").(*FindPetsParams)
}

// FindPets operation middleware
func FindPetsCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// Parameter object where we will unmarshal all parameters from the context
		var params FindPetsParams

		// ------------- Optional query parameter "tags" -------------
		if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "limit" -------------
		if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "FindPetsParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// AddPet operation middleware
func AddPetCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// DeletePet operation middleware
func DeletePetCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int64

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// FindPetById operation middleware
func FindPetByIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int64

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(FindPetsCtx)
		r.Get("/pets", si.FindPets)
	})
	r.Group(func(r chi.Router) {
		r.Use(AddPetCtx)
		r.Post("/pets", si.AddPet)
	})
	r.Group(func(r chi.Router) {
		r.Use(DeletePetCtx)
		r.Delete("/pets/{id}", si.DeletePet)
	})
	r.Group(func(r chi.Router) {
		r.Use(FindPetByIdCtx)
		r.Get("/pets/{id}", si.FindPetById)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Z/f4/ZW8PbnY6u1097D7RwAAAP//rv094P8SAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
