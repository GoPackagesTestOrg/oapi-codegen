// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/indigonote/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"net/http"
	"strings"
)

// Error defines model for Error.
type Error struct {

	// Error code
	Code int32 `json:"code"`

	// Error message
	Message string `json:"message"`
}

// NewPet defines model for NewPet.
type NewPet struct {

	// Name of the pet
	Name *string `json:"name" validate:"omitempty,alphanum,max=1048576"`
	Size int     `json:"size" validate:"max=20,min=0"`

	// Type of the pet
	Tag *string `json:"tag,omitempty" validate:"omitempty,min=2,max=32,regex=^[A-Za-z]+"`
}

// Pet defines model for Pet.
type Pet struct {
	// Embedded struct due to allOf(#/components/schemas/NewPet)
	NewPet
	// Embedded fields due to inline allOf schema

	// Unique id of the pet
	Id int64 `json:"id" validate:"max=100,min=1"`
}

// FindPetsParams defines parameters for FindPets.
type FindPetsParams struct {

	// tags to filter by
	Tags *[]string `json:"tags,omitempty"`

	// maximum number of results to return
	Limit *int32 `json:"limit,omitempty"`
}

// AddPetJSONBody defines parameters for AddPet.
type AddPetJSONBody NewPet

// AddPetRequestBody defines body for AddPet for application/json ContentType.
type AddPetJSONRequestBody AddPetJSONBody

type ServerInterface interface {
	// Returns all pets (GET /pets)
	FindPets(w http.ResponseWriter, r *http.Request)
	// Creates a new pet (POST /pets)
	AddPet(w http.ResponseWriter, r *http.Request)
	// Deletes a pet by ID (DELETE /pets/{id})
	DeletePet(w http.ResponseWriter, r *http.Request)
	// Returns a pet by ID (GET /pets/{id})
	FindPetById(w http.ResponseWriter, r *http.Request)
}

// ParamsForFindPets operation parameters from context
func ParamsForFindPets(ctx context.Context) *FindPetsParams {
	return ctx.Value("FindPetsParams").(*FindPetsParams)
}

// FindPets operation middleware
func FindPetsCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// Parameter object where we will unmarshal all parameters from the context
		var params FindPetsParams

		// ------------- Optional query parameter "tags" -------------
		if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "limit" -------------
		if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "FindPetsParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// AddPet operation middleware
func AddPetCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// DeletePet operation middleware
func DeletePetCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int64

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// FindPetById operation middleware
func FindPetByIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int64

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(FindPetsCtx)
		r.Get("/pets", si.FindPets)
	})
	r.Group(func(r chi.Router) {
		r.Use(AddPetCtx)
		r.Post("/pets", si.AddPet)
	})
	r.Group(func(r chi.Router) {
		r.Use(DeletePetCtx)
		r.Delete("/pets/{id}", si.DeletePet)
	})
	r.Group(func(r chi.Router) {
		r.Use(FindPetByIdCtx)
		r.Get("/pets/{id}", si.FindPetById)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
