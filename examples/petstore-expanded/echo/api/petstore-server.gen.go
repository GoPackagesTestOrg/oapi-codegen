// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by sios.tech/indigo/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error
	// Creates a new pet
	// (POST /pets)
	AddPet(ctx echo.Context) error
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/pets", wrapper.FindPets)
	router.POST("/pets", wrapper.AddPet)
	router.DELETE("/pets/:id", wrapper.DeletePet)
	router.GET("/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Z/f4/ZW8PbnY6u1097D7RwAAAP//rv094P8SAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
