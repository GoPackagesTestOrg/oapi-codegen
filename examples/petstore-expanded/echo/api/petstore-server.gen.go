// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by sios.tech/indigo/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error
	// Creates a new pet
	// (POST /pets)
	AddPet(ctx echo.Context) error
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/pets", wrapper.FindPets)
	router.POST("/pets", wrapper.AddPet)
	router.DELETE("/pets/:id", wrapper.DeletePet)
	router.GET("/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"LhMAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
